{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","prototype","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"wPAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAoB5C,OAEI,0BAAMC,SAdO,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAEjCR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACrCN,EAAc,OAUL,4CAGK,2BACAO,KAAK,OACLC,MAAOT,EACPU,SA3BS,SAACP,GAC3BF,EAAcE,EAAEQ,OAAOF,YAmCvBZ,EAAYe,UAAY,CAEpBd,c,OAAee,EAAUC,KAAKC,Y,2BC3CrBC,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAGFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAChC,MAAO,CAEPC,GAAKD,EAAIC,GACTC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZX,kBAkBfM,GAlBe,4CAAH,sDCAPO,EAAc,SAAC,GAAkB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAKhC,OACI,yBAAKc,UAAU,8CACf,yBAAKC,IAAMf,EAAKgB,IAAKN,IACpB,2BAAIA,KCLAO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAc,IAAD,EAEhBlB,mBAAS,CAE/ByB,KAAM,GACNa,SAAU,IAL4B,mBAEnCC,EAFmC,KAE5BC,EAF4B,KA0B1C,OAlBIC,qBAAY,WAEZxB,EAAQC,GACPwB,MAAM,SAAAC,GAGCH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAMtB,CAACpB,IAIGqB,EDrB4BK,CAAa1B,GAAhCa,EAHuB,EAG7BN,KAAca,EAHe,EAGfA,QAMpB,OACH,oCACA,wBAAIJ,UAAU,qCAAqChB,GACjDoB,GAAW,uBAAGJ,UAAU,oCAAb,WAGN,yBAAKA,UAAU,aACZ,4BAGQH,EAAOJ,KAAK,SAAAC,GAAG,OAEX,kBAAC,EAAD,eAEAiB,IAAKjB,EAAIC,IACLD,WEzBdkB,EAAe,WAAM,MAMM9C,mBAAS,CAAC,cANhB,mBAMvB+C,EANuB,KAMXhD,EANW,KAe1B,OACI,oCAGG,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAE3B,6BAIA,4BAGDgD,EAAWpB,KAAI,SAAAT,GAAQ,OAExB,kBAAE,EAAF,CACA2B,IAAM3B,EACNA,SAAUA,UChCxB8B,IAASC,OACJ,kBAAC,EAAD,MACFC,SAASC,eAAe,W","file":"static/js/main.f4dbdd5d.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\nconst [inputValue, setInputValue] = useState('');\r\n\r\nconst handleImputChange = (e) => { //actualiza el estado del input\r\nsetInputValue(e.target.value);\r\n\r\n}\r\n\r\nconst handleSubmit = (e) => {  \r\n    e.preventDefault(); //prevenir el comportamiento por defecto del form, y no hacer refresh completo del navegador\r\n     \r\n    if (inputValue.trim().length > 2){\r\n\r\n  setCategories(cats => [inputValue, ...cats] );// evia el dato que ingresamos al input, a el comonente principal GifExpert\r\n   setInputValue('');\r\n    }\r\n    \r\n}\r\n\r\n\r\n    return (\r\n        \r\n        <form onSubmit={handleSubmit}>\r\n\r\n            <h2>Add Category</h2>\r\n   \r\n              \r\n                 <input  \r\n                 type=\"text\"\r\n                 value={inputValue}\r\n                 onChange= {handleImputChange} //\r\n                 />\r\n                 \r\n        </form>\r\n                \r\n        \r\n    )\r\n}\r\n\r\nAddCategory.prototype = {\r\n\r\n    setCategories: PropTypes.func.isRequired\r\n\r\n}","\r\n\r\nexport const getGifs = async(category) => {\r\n \r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category) }&limit=10&api_key=ezRSpjhtuRjbZfgxtS3i5GxIGaVfxYCL`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    \r\n\r\n   const gifs = data.map(img => {\r\nreturn {\r\n\r\nid : img.id,\r\ntitle: img.title,\r\nurl: img.images?.downsized_medium.url\r\n}\r\n\r\n\r\n   })\r\n    \r\n return gifs;\r\n\r\n    }","import React from 'react'\r\n\r\nexport const GifGridItem = ( {title,url}) => {\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeInDown'>\r\n        <img src= {url} alt={title} />\r\n         <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\nexport default GifGridItem;\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport {GifGridItem} from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    \r\n   const {data: images, loading} = useFetchGifs(category);\r\n   \r\n   \r\n\r\n    \r\n        \r\n    return (\r\n <>\r\n <h3 className=\"animate__animated animate__fadeIn\">{category}</h3> \r\n { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n\r\n\r\n        <div className='card-grid'>\r\n           <ol>\r\n               {\r\n                   \r\n                   images.map( img => (\r\n                       \r\n                       <GifGridItem  \r\n                       \r\n                       key={img.id}\r\n                       {...img}\r\n                       \r\n                       />\r\n                       ))\r\n                       \r\n                       \r\n                    }\r\n\r\n           </ol>\r\n        </div>\r\n                    </>\r\n    )\r\n}\r\n","import {useEffect, useState} from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    \r\nconst [state, setstate] = useState({\r\n\r\n    data: [],\r\n    loading : true\r\n   });\r\n\r\n    useEffect ( () => {\r\n\r\n    getGifs(category)\r\n    .then( imgs=> {\r\n\r\n       \r\n            setstate({\r\n                data: imgs,\r\n                loading: false\r\n            });\r\n     \r\n    })\r\n  \r\n\r\n}, [category])\r\n\r\n\r\n\r\nreturn state;\r\n\r\n}\r\n","import React, {useState}  from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n   \r\n    \r\n\r\n    //hook para agregar  a arreglo\r\n    \r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    const handleaAdd = () =>{\r\n\r\n        //setCategories = ( ['HunterXHunter', ...categories] ); \r\n       //setCategories(cats => [...cats, 'hunterXhunter'])//este funciona para enviar otro elemento al arreglo mediante el evento OnClick\r\n    }\r\n\r\n\r\n        return (\r\n            <>\r\n               \r\n\r\n               <h2>GifExpertApp</h2>\r\n               <AddCategory setCategories={setCategories} />\r\n\r\n                <hr />\r\n\r\n                \r\n\r\n                <ol>\r\n           \r\n           {\r\n               categories.map(category => (       \r\n               \r\n              < GifGrid \r\n              key= {category}\r\n              category={category} \r\n              \r\n              />\r\n\r\n\r\n               ))\r\n           }\r\n\r\n                </ol>\r\n            </>\r\n        )\r\n    }\r\n\r\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp}  from './GifExpertApp';\n\nReactDOM.render(\n     <GifExpertApp />,\n   document.getElementById('root')\n);\n\n"],"sourceRoot":""}